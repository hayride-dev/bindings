// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package tools represents the imported interface "hayride:ai/tools@0.0.33".
package tools

import (
	"github.com/hayride-dev/bindings/go/ai/gen/imports/hayride/ai/types"
	"github.com/hayride-dev/bindings/go/ai/gen/imports/wasi/io/poll"
	"go.bytecodealliance.org/cm"
)

// Pollable represents the imported type alias "hayride:ai/tools@0.0.33#pollable".
//
// See [poll.Pollable] for more information.
type Pollable = poll.Pollable

// Tool represents the type alias "hayride:ai/tools@0.0.33#tool".
//
// See [types.Tool] for more information.
type Tool = types.Tool

// ErrorCode represents the enum "hayride:ai/tools@0.0.33#error-code".
//
//	enum error-code {
//		invalid-argument,
//		missing-function,
//		runtime-error,
//		unknown
//	}
type ErrorCode uint8

const (
	// caller module passed an invalid argument.
	ErrorCodeInvalidArgument ErrorCode = iota

	// missing function
	ErrorCodeMissingFunction

	// heneric Runtime Error.
	ErrorCodeRuntimeError

	// unsupported operation.
	ErrorCodeUnknown
)

var stringsErrorCode = [4]string{
	"invalid-argument",
	"missing-function",
	"runtime-error",
	"unknown",
}

// String implements [fmt.Stringer], returning the enum case name of e.
func (e ErrorCode) String() string {
	return stringsErrorCode[e]
}

// Error represents the imported resource "hayride:ai/tools@0.0.33#error".
//
//	resource error
type Error cm.Resource

// ResourceDrop represents the imported resource-drop for resource "error".
//
// Drops a resource handle.
//
//go:nosplit
func (self Error) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_ErrorResourceDrop((uint32)(self0))
	return
}

// Code represents the imported method "code".
//
// return the error code.
//
//	code: func() -> error-code
//
//go:nosplit
func (self Error) Code() (result ErrorCode) {
	self0 := cm.Reinterpret[uint32](self)
	result0 := wasmimport_ErrorCode((uint32)(self0))
	result = (ErrorCode)((uint32)(result0))
	return
}

// Data represents the imported method "data".
//
// errors can propagated with backend specific status through a string value.
//
//	data: func() -> string
//
//go:nosplit
func (self Error) Data() (result string) {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_ErrorData((uint32)(self0), &result)
	return
}

// FutureResult represents the imported resource "hayride:ai/tools@0.0.33#future-result".
//
//	resource future-result
type FutureResult cm.Resource

// ResourceDrop represents the imported resource-drop for resource "future-result".
//
// Drops a resource handle.
//
//go:nosplit
func (self FutureResult) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_FutureResultResourceDrop((uint32)(self0))
	return
}

// Get represents the imported method "get".
//
//	get: func() -> result<list<u8>, error>
//
//go:nosplit
func (self FutureResult) Get() (result cm.Result[cm.List[uint8], cm.List[uint8], Error]) {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_FutureResultGet((uint32)(self0), &result)
	return
}

// Subscribe represents the imported method "subscribe".
//
//	subscribe: func() -> pollable
//
//go:nosplit
func (self FutureResult) Subscribe() (result Pollable) {
	self0 := cm.Reinterpret[uint32](self)
	result0 := wasmimport_FutureResultSubscribe((uint32)(self0))
	result = cm.Reinterpret[Pollable]((uint32)(result0))
	return
}

// Format represents the imported function "format".
//
//	format: func(model: string, tool: tool) -> string
//
//go:nosplit
func Format(model string, tool Tool) (result string) {
	model0, model1 := cm.LowerString(model)
	tool0, tool1, tool2, tool3 := lower_Tool(tool)
	wasmimport_Format((*uint8)(model0), (uint32)(model1), (*uint8)(tool0), (uint32)(tool1), (*uint8)(tool2), (uint32)(tool3), &result)
	return
}

// Invoke represents the imported function "invoke".
//
//	invoke: func(tool: tool, function: string, args: list<string>) -> result<future-result,
//	error>
//
//go:nosplit
func Invoke(tool Tool, function string, args cm.List[string]) (result cm.Result[FutureResult, FutureResult, Error]) {
	tool0, tool1, tool2, tool3 := lower_Tool(tool)
	function0, function1 := cm.LowerString(function)
	args0, args1 := cm.LowerList(args)
	wasmimport_Invoke((*uint8)(tool0), (uint32)(tool1), (*uint8)(tool2), (uint32)(tool3), (*uint8)(function0), (uint32)(function1), (*string)(args0), (uint32)(args1), &result)
	return
}
