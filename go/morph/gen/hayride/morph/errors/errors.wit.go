// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package errors represents the imported interface "hayride:morph/errors@0.0.12".
package errors

import (
	"github.com/bytecodealliance/wasm-tools-go/cm"
)

// ErrorCode represents the enum "hayride:morph/errors@0.0.12#error-code".
//
//	enum error-code {
//		invalid-argument,
//		timeout,
//		runtime-error,
//		unsupported-operation,
//		too-large,
//		unknown
//	}
type ErrorCode uint8

const (
	ErrorCodeInvalidArgument ErrorCode = iota
	ErrorCodeTimeout
	ErrorCodeRuntimeError
	ErrorCodeUnsupportedOperation
	ErrorCodeTooLarge
	ErrorCodeUnknown
)

var stringsErrorCode = [6]string{
	"invalid-argument",
	"timeout",
	"runtime-error",
	"unsupported-operation",
	"too-large",
	"unknown",
}

// String implements [fmt.Stringer], returning the enum case name of e.
func (e ErrorCode) String() string {
	return stringsErrorCode[e]
}

// Error represents the imported resource "hayride:morph/errors@0.0.12#error".
//
//	resource error
type Error cm.Resource

// ResourceDrop represents the imported resource-drop for resource "error".
//
// Drops a resource handle.
//
//go:nosplit
func (self Error) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_ErrorResourceDrop((uint32)(self0))
	return
}

// Code represents the imported method "code".
//
// Return the error code.
//
//	code: func() -> error-code
//
//go:nosplit
func (self Error) Code() (result ErrorCode) {
	self0 := cm.Reinterpret[uint32](self)
	result0 := wasmimport_ErrorCode((uint32)(self0))
	result = (ErrorCode)((uint32)(result0))
	return
}

// Data represents the imported method "data".
//
// Errors can propagated with backend specific status through a string value.
//
//	data: func() -> string
//
//go:nosplit
func (self Error) Data() (result string) {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_ErrorData((uint32)(self0), &result)
	return
}
