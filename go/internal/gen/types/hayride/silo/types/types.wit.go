// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package types represents the imported interface "hayride:silo/types@0.0.61".
package types

import (
	"go.bytecodealliance.org/cm"
)

// ErrNo represents the u32 "hayride:silo/types@0.0.61#err-no".
//
// system error numbers
//
//	type err-no = u32
type ErrNo uint32

// ThreadStatus represents the enum "hayride:silo/types@0.0.61#thread-status".
//
//	enum thread-status {
//		unknown,
//		processing,
//		exited,
//		killed
//	}
type ThreadStatus uint8

const (
	ThreadStatusUnknown ThreadStatus = iota
	ThreadStatusProcessing
	ThreadStatusExited
	ThreadStatusKilled
)

var _ThreadStatusStrings = [4]string{
	"unknown",
	"processing",
	"exited",
	"killed",
}

// String implements [fmt.Stringer], returning the enum case name of e.
func (e ThreadStatus) String() string {
	return _ThreadStatusStrings[e]
}

// MarshalText implements [encoding.TextMarshaler].
func (e ThreadStatus) MarshalText() ([]byte, error) {
	return []byte(e.String()), nil
}

// UnmarshalText implements [encoding.TextUnmarshaler], unmarshaling into an enum
// case. Returns an error if the supplied text is not one of the enum cases.
func (e *ThreadStatus) UnmarshalText(text []byte) error {
	return _ThreadStatusUnmarshalCase(e, text)
}

var _ThreadStatusUnmarshalCase = cm.CaseUnmarshaler[ThreadStatus](_ThreadStatusStrings[:])

// ThreadMetadata represents the record "hayride:silo/types@0.0.61#thread-metadata".
//
//	record thread-metadata {
//		id: string,
//		pkg: string,
//		function: string,
//		args: list<string>,
//		output: list<u8>,
//		status: thread-status,
//	}
type ThreadMetadata struct {
	_        cm.HostLayout   `json:"-"`
	ID       string          `json:"id"`
	Pkg      string          `json:"pkg"`
	Function string          `json:"function"`
	Args     cm.List[string] `json:"args"`
	Output   cm.List[uint8]  `json:"output"`
	Status   ThreadStatus    `json:"status"`
}
