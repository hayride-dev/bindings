// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package types represents the imported interface "hayride:core/types@0.0.63".
package types

import (
	"github.com/hayride-dev/bindings/go/internal/gen/types/hayride/ai/types"
	"github.com/hayride-dev/bindings/go/internal/gen/types/hayride/silo/threads"
	"go.bytecodealliance.org/cm"
)

// ThreadMetadata represents the type alias "hayride:core/types@0.0.63#thread-metadata".
//
// See [threads.ThreadMetadata] for more information.
type ThreadMetadata = threads.ThreadMetadata

// ThreadStatus represents the type alias "hayride:core/types@0.0.63#thread-status".
//
// See [threads.ThreadStatus] for more information.
type ThreadStatus = threads.ThreadStatus

// Message represents the type alias "hayride:core/types@0.0.63#message".
//
// See [types.Message] for more information.
type Message = types.Message

// Cast represents the record "hayride:core/types@0.0.63#cast".
//
//	record cast {
//		name: string,
//		function: string,
//		args: list<string>,
//		envs: list<tuple<string, string>>,
//	}
type Cast struct {
	_        cm.HostLayout      `json:"-"`
	Name     string             `json:"name"`
	Function string             `json:"function"`
	Args     cm.List[string]    `json:"args"`
	Envs     cm.List[[2]string] `json:"envs"`
}

// Generate represents the record "hayride:core/types@0.0.63#generate".
//
//	record generate {
//		model: string,
//		system: string,
//		messages: list<message>,
//	}
type Generate struct {
	_        cm.HostLayout    `json:"-"`
	Model    string           `json:"model"`
	System   string           `json:"system"`
	Messages cm.List[Message] `json:"messages"`
}

// RequestData represents the variant "hayride:core/types@0.0.63#request-data".
//
//	variant request-data {
//		unknown,
//		cast(cast),
//		session-id(string),
//		generate(generate),
//	}
type RequestData cm.Variant[uint8, CastShape, Cast]

// RequestDataUnknown returns a [RequestData] of case "unknown".
func RequestDataUnknown() RequestData {
	var data struct{}
	return cm.New[RequestData](0, data)
}

// Unknown returns true if [RequestData] represents the variant case "unknown".
func (self *RequestData) Unknown() bool {
	return self.Tag() == 0
}

// RequestDataCast returns a [RequestData] of case "cast".
func RequestDataCast(data Cast) RequestData {
	return cm.New[RequestData](1, data)
}

// Cast returns a non-nil *[Cast] if [RequestData] represents the variant case "cast".
func (self *RequestData) Cast() *Cast {
	return cm.Case[Cast](self, 1)
}

// RequestDataSessionID returns a [RequestData] of case "session-id".
func RequestDataSessionID(data string) RequestData {
	return cm.New[RequestData](2, data)
}

// SessionID returns a non-nil *[string] if [RequestData] represents the variant case "session-id".
func (self *RequestData) SessionID() *string {
	return cm.Case[string](self, 2)
}

// RequestDataGenerate returns a [RequestData] of case "generate".
func RequestDataGenerate(data Generate) RequestData {
	return cm.New[RequestData](3, data)
}

// Generate returns a non-nil *[Generate] if [RequestData] represents the variant case "generate".
func (self *RequestData) Generate() *Generate {
	return cm.Case[Generate](self, 3)
}

var _RequestDataStrings = [4]string{
	"unknown",
	"cast",
	"session-id",
	"generate",
}

// String implements [fmt.Stringer], returning the variant case name of v.
func (v RequestData) String() string {
	return _RequestDataStrings[v.Tag()]
}

// ResponseData represents the variant "hayride:core/types@0.0.63#response-data".
//
//	variant response-data {
//		unknown,
//		sessions(list<thread-metadata>),
//		session-id(string),
//		session-status(thread-status),
//		messages(list<message>),
//		path(string),
//		paths(list<string>),
//		version(string),
//	}
type ResponseData cm.Variant[uint8, cm.List[ThreadMetadata], cm.List[ThreadMetadata]]

// ResponseDataUnknown returns a [ResponseData] of case "unknown".
func ResponseDataUnknown() ResponseData {
	var data struct{}
	return cm.New[ResponseData](0, data)
}

// Unknown returns true if [ResponseData] represents the variant case "unknown".
func (self *ResponseData) Unknown() bool {
	return self.Tag() == 0
}

// ResponseDataSessions returns a [ResponseData] of case "sessions".
func ResponseDataSessions(data cm.List[ThreadMetadata]) ResponseData {
	return cm.New[ResponseData](1, data)
}

// Sessions returns a non-nil *[cm.List[ThreadMetadata]] if [ResponseData] represents the variant case "sessions".
func (self *ResponseData) Sessions() *cm.List[ThreadMetadata] {
	return cm.Case[cm.List[ThreadMetadata]](self, 1)
}

// ResponseDataSessionID returns a [ResponseData] of case "session-id".
func ResponseDataSessionID(data string) ResponseData {
	return cm.New[ResponseData](2, data)
}

// SessionID returns a non-nil *[string] if [ResponseData] represents the variant case "session-id".
func (self *ResponseData) SessionID() *string {
	return cm.Case[string](self, 2)
}

// ResponseDataSessionStatus returns a [ResponseData] of case "session-status".
func ResponseDataSessionStatus(data ThreadStatus) ResponseData {
	return cm.New[ResponseData](3, data)
}

// SessionStatus returns a non-nil *[ThreadStatus] if [ResponseData] represents the variant case "session-status".
func (self *ResponseData) SessionStatus() *ThreadStatus {
	return cm.Case[ThreadStatus](self, 3)
}

// ResponseDataMessages returns a [ResponseData] of case "messages".
func ResponseDataMessages(data cm.List[Message]) ResponseData {
	return cm.New[ResponseData](4, data)
}

// Messages returns a non-nil *[cm.List[Message]] if [ResponseData] represents the variant case "messages".
func (self *ResponseData) Messages() *cm.List[Message] {
	return cm.Case[cm.List[Message]](self, 4)
}

// ResponseDataPath returns a [ResponseData] of case "path".
func ResponseDataPath(data string) ResponseData {
	return cm.New[ResponseData](5, data)
}

// Path returns a non-nil *[string] if [ResponseData] represents the variant case "path".
func (self *ResponseData) Path() *string {
	return cm.Case[string](self, 5)
}

// ResponseDataPaths returns a [ResponseData] of case "paths".
func ResponseDataPaths(data cm.List[string]) ResponseData {
	return cm.New[ResponseData](6, data)
}

// Paths returns a non-nil *[cm.List[string]] if [ResponseData] represents the variant case "paths".
func (self *ResponseData) Paths() *cm.List[string] {
	return cm.Case[cm.List[string]](self, 6)
}

// ResponseDataVersion returns a [ResponseData] of case "version".
func ResponseDataVersion(data string) ResponseData {
	return cm.New[ResponseData](7, data)
}

// Version returns a non-nil *[string] if [ResponseData] represents the variant case "version".
func (self *ResponseData) Version() *string {
	return cm.Case[string](self, 7)
}

var _ResponseDataStrings = [8]string{
	"unknown",
	"sessions",
	"session-id",
	"session-status",
	"messages",
	"path",
	"paths",
	"version",
}

// String implements [fmt.Stringer], returning the variant case name of v.
func (v ResponseData) String() string {
	return _ResponseDataStrings[v.Tag()]
}

// Request represents the record "hayride:core/types@0.0.63#request".
//
//	record request {
//		data: request-data,
//		metadata: list<tuple<string, string>>,
//	}
type Request struct {
	_        cm.HostLayout      `json:"-"`
	Data     RequestData        `json:"data"`
	Metadata cm.List[[2]string] `json:"metadata"`
}

// Response represents the record "hayride:core/types@0.0.63#response".
//
//	record response {
//		data: response-data,
//		error: string,
//		next: string,
//		prev: string,
//	}
type Response struct {
	_     cm.HostLayout `json:"-"`
	Data  ResponseData  `json:"data"`
	Error string        `json:"error"`

	// Cursor for pagination
	Next string `json:"next"`
	Prev string `json:"prev"`
}
