// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package prompts represents the exported interface "hayride:mcp/prompts@0.0.61".
package prompts

import (
	"github.com/hayride-dev/bindings/go/internal/gen/exports/hayride/mcp/types"
	"go.bytecodealliance.org/cm"
)

// GetPromptParams represents the type alias "hayride:mcp/prompts@0.0.61#get-prompt-params".
//
// See [types.GetPromptParams] for more information.
type GetPromptParams = types.GetPromptParams

// GetPromptResult represents the type alias "hayride:mcp/prompts@0.0.61#get-prompt-result".
//
// See [types.GetPromptResult] for more information.
type GetPromptResult = types.GetPromptResult

// ListPromptsResult represents the type alias "hayride:mcp/prompts@0.0.61#list-prompts-result".
//
// See [types.ListPromptsResult] for more information.
type ListPromptsResult = types.ListPromptsResult

// ErrorCode represents the enum "hayride:mcp/prompts@0.0.61#error-code".
//
//	enum error-code {
//		prompt-list-failed,
//		prompt-not-found,
//		unknown
//	}
type ErrorCode uint8

const (
	ErrorCodePromptListFailed ErrorCode = iota
	ErrorCodePromptNotFound
	ErrorCodeUnknown
)

var _ErrorCodeStrings = [3]string{
	"prompt-list-failed",
	"prompt-not-found",
	"unknown",
}

// String implements [fmt.Stringer], returning the enum case name of e.
func (e ErrorCode) String() string {
	return _ErrorCodeStrings[e]
}

// MarshalText implements [encoding.TextMarshaler].
func (e ErrorCode) MarshalText() ([]byte, error) {
	return []byte(e.String()), nil
}

// UnmarshalText implements [encoding.TextUnmarshaler], unmarshaling into an enum
// case. Returns an error if the supplied text is not one of the enum cases.
func (e *ErrorCode) UnmarshalText(text []byte) error {
	return _ErrorCodeUnmarshalCase(e, text)
}

var _ErrorCodeUnmarshalCase = cm.CaseUnmarshaler[ErrorCode](_ErrorCodeStrings[:])

// Error represents the exported resource "hayride:mcp/prompts@0.0.61#error".
//
//	resource error
type Error cm.Resource

// ErrorResourceNew represents the imported resource-new for resource "error".
//
// Creates a new resource handle.
//
//go:nosplit
func ErrorResourceNew(rep cm.Rep) (result Error) {
	rep0 := cm.Reinterpret[uint32](rep)
	result0 := wasmimport_ErrorResourceNew((uint32)(rep0))
	result = cm.Reinterpret[Error]((uint32)(result0))
	return
}

// ResourceRep represents the imported resource-rep for resource "error".
//
// Returns the underlying resource representation.
//
//go:nosplit
func (self Error) ResourceRep() (result cm.Rep) {
	self0 := cm.Reinterpret[uint32](self)
	result0 := wasmimport_ErrorResourceRep((uint32)(self0))
	result = cm.Reinterpret[cm.Rep]((uint32)(result0))
	return
}

// ResourceDrop represents the imported resource-drop for resource "error".
//
// Drops a resource handle.
//
//go:nosplit
func (self Error) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_ErrorResourceDrop((uint32)(self0))
	return
}

func init() {
	Exports.Error.Destructor = func(self cm.Rep) {}
}

// Tools represents the exported resource "hayride:mcp/prompts@0.0.61#tools".
//
//	resource tools
type Tools cm.Resource

// ToolsResourceNew represents the imported resource-new for resource "tools".
//
// Creates a new resource handle.
//
//go:nosplit
func ToolsResourceNew(rep cm.Rep) (result Tools) {
	rep0 := cm.Reinterpret[uint32](rep)
	result0 := wasmimport_ToolsResourceNew((uint32)(rep0))
	result = cm.Reinterpret[Tools]((uint32)(result0))
	return
}

// ResourceRep represents the imported resource-rep for resource "tools".
//
// Returns the underlying resource representation.
//
//go:nosplit
func (self Tools) ResourceRep() (result cm.Rep) {
	self0 := cm.Reinterpret[uint32](self)
	result0 := wasmimport_ToolsResourceRep((uint32)(self0))
	result = cm.Reinterpret[cm.Rep]((uint32)(result0))
	return
}

// ResourceDrop represents the imported resource-drop for resource "tools".
//
// Drops a resource handle.
//
//go:nosplit
func (self Tools) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_ToolsResourceDrop((uint32)(self0))
	return
}

func init() {
	Exports.Tools.Destructor = func(self cm.Rep) {}
}
