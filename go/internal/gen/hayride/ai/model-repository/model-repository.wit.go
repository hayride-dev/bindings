// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package modelrepository represents the imported interface "hayride:ai/model-repository@0.0.55".
package modelrepository

import (
	"go.bytecodealliance.org/cm"
)

// ErrorCode represents the enum "hayride:ai/model-repository@0.0.55#error-code".
//
//	enum error-code {
//		model-not-found,
//		invalid-model-name,
//		runtime-error,
//		not-enabled,
//		unknown
//	}
type ErrorCode uint8

const (
	ErrorCodeModelNotFound ErrorCode = iota
	ErrorCodeInvalidModelName
	ErrorCodeRuntimeError
	ErrorCodeNotEnabled
	ErrorCodeUnknown
)

var _ErrorCodeStrings = [5]string{
	"model-not-found",
	"invalid-model-name",
	"runtime-error",
	"not-enabled",
	"unknown",
}

// String implements [fmt.Stringer], returning the enum case name of e.
func (e ErrorCode) String() string {
	return _ErrorCodeStrings[e]
}

// MarshalText implements [encoding.TextMarshaler].
func (e ErrorCode) MarshalText() ([]byte, error) {
	return []byte(e.String()), nil
}

// UnmarshalText implements [encoding.TextUnmarshaler], unmarshaling into an enum
// case. Returns an error if the supplied text is not one of the enum cases.
func (e *ErrorCode) UnmarshalText(text []byte) error {
	return _ErrorCodeUnmarshalCase(e, text)
}

var _ErrorCodeUnmarshalCase = cm.CaseUnmarshaler[ErrorCode](_ErrorCodeStrings[:])

// Error represents the imported resource "hayride:ai/model-repository@0.0.55#error".
//
//	resource error
type Error cm.Resource

// ResourceDrop represents the imported resource-drop for resource "error".
//
// Drops a resource handle.
//
//go:nosplit
func (self Error) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_ErrorResourceDrop((uint32)(self0))
	return
}

// Code represents the imported method "code".
//
// return the error code.
//
//	code: func() -> error-code
//
//go:nosplit
func (self Error) Code() (result ErrorCode) {
	self0 := cm.Reinterpret[uint32](self)
	result0 := wasmimport_ErrorCode((uint32)(self0))
	result = (ErrorCode)((uint32)(result0))
	return
}

// Data represents the imported method "data".
//
// errors can propagated with backend specific status through a string value.
//
//	data: func() -> string
//
//go:nosplit
func (self Error) Data() (result string) {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_ErrorData((uint32)(self0), &result)
	return
}

// Download represents the imported function "download".
//
// download a model by name
//
//	download: func(name: string) -> result<string, error>
//
//go:nosplit
func Download(name string) (result cm.Result[string, string, Error]) {
	name0, name1 := cm.LowerString(name)
	wasmimport_Download((*uint8)(name0), (uint32)(name1), &result)
	return
}
