// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package threads represents the imported interface "hayride:silo/threads@0.0.57".
package threads

import (
	"go.bytecodealliance.org/cm"
)

// ErrNo represents the u32 "hayride:silo/threads@0.0.57#err-no".
//
// system error numbers
//
//	type err-no = u32
type ErrNo uint32

// ThreadStatus represents the enum "hayride:silo/threads@0.0.57#thread-status".
//
//	enum thread-status {
//		unknown,
//		processing,
//		exited,
//		killed
//	}
type ThreadStatus uint8

const (
	ThreadStatusUnknown ThreadStatus = iota
	ThreadStatusProcessing
	ThreadStatusExited
	ThreadStatusKilled
)

var _ThreadStatusStrings = [4]string{
	"unknown",
	"processing",
	"exited",
	"killed",
}

// String implements [fmt.Stringer], returning the enum case name of e.
func (e ThreadStatus) String() string {
	return _ThreadStatusStrings[e]
}

// MarshalText implements [encoding.TextMarshaler].
func (e ThreadStatus) MarshalText() ([]byte, error) {
	return []byte(e.String()), nil
}

// UnmarshalText implements [encoding.TextUnmarshaler], unmarshaling into an enum
// case. Returns an error if the supplied text is not one of the enum cases.
func (e *ThreadStatus) UnmarshalText(text []byte) error {
	return _ThreadStatusUnmarshalCase(e, text)
}

var _ThreadStatusUnmarshalCase = cm.CaseUnmarshaler[ThreadStatus](_ThreadStatusStrings[:])

// ThreadMetadata represents the record "hayride:silo/threads@0.0.57#thread-metadata".
//
//	record thread-metadata {
//		id: string,
//		pkg: string,
//		function: string,
//		args: list<string>,
//		output: list<u8>,
//		status: thread-status,
//	}
type ThreadMetadata struct {
	_        cm.HostLayout   `json:"-"`
	ID       string          `json:"id"`
	Pkg      string          `json:"pkg"`
	Function string          `json:"function"`
	Args     cm.List[string] `json:"args"`
	Output   cm.List[uint8]  `json:"output"`
	Status   ThreadStatus    `json:"status"`
}

// Thread represents the imported resource "hayride:silo/threads@0.0.57#thread".
//
//	resource thread
type Thread cm.Resource

// ResourceDrop represents the imported resource-drop for resource "thread".
//
// Drops a resource handle.
//
//go:nosplit
func (self Thread) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_ThreadResourceDrop((uint32)(self0))
	return
}

// ID represents the imported method "id".
//
//	id: func() -> result<string, err-no>
//
//go:nosplit
func (self Thread) ID() (result cm.Result[string, string, ErrNo]) {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_ThreadID((uint32)(self0), &result)
	return
}

// Wait represents the imported method "wait".
//
//	wait: func() -> result<list<u8>, err-no>
//
//go:nosplit
func (self Thread) Wait() (result cm.Result[cm.List[uint8], cm.List[uint8], ErrNo]) {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_ThreadWait((uint32)(self0), &result)
	return
}

// Spawn represents the imported function "spawn".
//
//	spawn: func(pkg: string, function: string, args: list<string>) -> result<thread,
//	err-no>
//
//go:nosplit
func Spawn(pkg string, function string, args cm.List[string]) (result cm.Result[Thread, Thread, ErrNo]) {
	pkg0, pkg1 := cm.LowerString(pkg)
	function0, function1 := cm.LowerString(function)
	args0, args1 := cm.LowerList(args)
	wasmimport_Spawn((*uint8)(pkg0), (uint32)(pkg1), (*uint8)(function0), (uint32)(function1), (*string)(args0), (uint32)(args1), &result)
	return
}

// Status represents the imported function "status".
//
//	status: func(id: string) -> result<thread-metadata, err-no>
//
//go:nosplit
func Status(id string) (result cm.Result[ThreadMetadataShape, ThreadMetadata, ErrNo]) {
	id0, id1 := cm.LowerString(id)
	wasmimport_Status((*uint8)(id0), (uint32)(id1), &result)
	return
}

// Kill represents the imported function "kill".
//
// get metadata about a single thread
//
//	kill: func(id: string) -> result<_, err-no>
//
//go:nosplit
func Kill(id string) (result cm.Result[ErrNo, struct{}, ErrNo]) {
	id0, id1 := cm.LowerString(id)
	wasmimport_Kill((*uint8)(id0), (uint32)(id1), &result)
	return
}

// Group represents the imported function "group".
//
//	group: func() -> result<list<thread-metadata>, err-no>
//
//go:nosplit
func Group() (result cm.Result[cm.List[ThreadMetadata], cm.List[ThreadMetadata], ErrNo]) {
	wasmimport_Group(&result)
	return
}
