// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package types represents the imported interface "hayride:mcp/types@0.0.61".
package types

import (
	"go.bytecodealliance.org/cm"
)

// ToolAnnotations represents the record "hayride:mcp/types@0.0.61#tool-annotations".
//
// Tool annotations provide additional metadata about a tool's behavior
// https://modelcontextprotocol.io/docs/concepts/tools#available-tool-annotations
//
//	record tool-annotations {
//		title: string,
//		read-only-hint: bool,
//		destructive-hint: bool,
//		idempotent-hint: bool,
//		open-world-hint: bool,
//	}
type ToolAnnotations struct {
	_ cm.HostLayout `json:"-"`
	// A human-readable title for the tool, useful for UI display
	Title string `json:"title"`

	// If true, indicates the tool does not modify its environment
	// default: false
	ReadOnlyHint bool `json:"read-only-hint"`

	// If true, the tool may perform destructive updates
	// (only meaningful when readOnlyHint is false)
	// default: true
	DestructiveHint bool `json:"destructive-hint"`

	// If true, calling the tool repeatedly with the same arguments
	// has no additional effect (only meaningful when readOnlyHint is false)
	// default: false
	IdempotentHint bool `json:"idempotent-hint"`

	// If true, the tool may interact with an “open world” of external entities
	// default: true
	OpenWorldHint bool `json:"open-world-hint"`
}

// ToolSchema represents the record "hayride:mcp/types@0.0.61#tool-schema".
//
//	record tool-schema {
//		schema-type: string,
//		properties: list<tuple<string, string>>,
//		required: list<string>,
//	}
type ToolSchema struct {
	_          cm.HostLayout      `json:"-"`
	SchemaType string             `json:"schema-type"`
	Properties cm.List[[2]string] `json:"properties"`
	Required   cm.List[string]    `json:"required"`
}

// Tool represents the record "hayride:mcp/types@0.0.61#tool".
//
//	record tool {
//		name: string,
//		title: string,
//		description: string,
//		input-schema: tool-schema,
//		output-schema: tool-schema,
//		annotations: tool-annotations,
//	}
type Tool struct {
	_ cm.HostLayout `json:"-"`
	// Unique identifier for the tool
	Name string `json:"name"`

	// Optional human-readable name of the tool for display purposes.
	Title string `json:"title"`

	// Human-readable description of functionality
	Description string `json:"description"`

	// JSON Schema defining expected parameters
	InputSchema ToolSchema `json:"input-schema"`

	// Optional JSON Schema defining expected output structure
	OutputSchema ToolSchema `json:"output-schema"`

	// optional properties describing tool behavior
	Annotations ToolAnnotations `json:"annotations"`
}

// McpResource represents the record "hayride:mcp/types@0.0.61#mcp-resource".
//
//	record mcp-resource {
//		name: string,
//		title: string,
//		description: string,
//		uri: string,
//		mime-type: string,
//		size: u64,
//		annotations: tool-annotations,
//	}
type McpResource struct {
	_ cm.HostLayout `json:"-"`
	// The name of the resource
	Name string `json:"name"`

	// A human-readable title for the resource, useful for UI display
	Title string `json:"title"`

	// A human-readable description of the resource
	Description string `json:"description"`

	// The URI of the resource
	URI string `json:"uri"`

	// The MIME type of the resource
	MIMEType string `json:"mime-type"`

	// The size of the raw resource contents in bytes
	Size uint64 `json:"size"`

	// optional properties describing tool behavior
	Annotations ToolAnnotations `json:"annotations"`
}

// McpResourceTemplate represents the record "hayride:mcp/types@0.0.61#mcp-resource-template".
//
//	record mcp-resource-template {
//		name: string,
//		title: string,
//		description: string,
//		uri-template: string,
//		mime-type: string,
//		annotations: tool-annotations,
//	}
type McpResourceTemplate struct {
	_ cm.HostLayout `json:"-"`
	// The name of the resource template
	Name string `json:"name"`

	// A human-readable title for the resource template, useful for UI display
	Title string `json:"title"`

	// A human-readable description of the resource template
	Description string `json:"description"`

	// A URI template (RFC 6570) that can be used to construct resource URIs
	URITemplate string `json:"uri-template"`

	// The MIME type of the resource template
	MIMEType string `json:"mime-type"`

	// optional properties describing tool behavior
	Annotations ToolAnnotations `json:"annotations"`
}

// TextContent represents the record "hayride:mcp/types@0.0.61#text-content".
//
//	record text-content {
//		content-type: string,
//		text: string,
//	}
type TextContent struct {
	_ cm.HostLayout `json:"-"`
	// Must be "text"
	ContentType string `json:"content-type"`

	// Tool result text
	Text string `json:"text"`
}

// ImageContent represents the record "hayride:mcp/types@0.0.61#image-content".
//
//	record image-content {
//		content-type: string,
//		data: list<u8>,
//		mime-type: string,
//	}
type ImageContent struct {
	_ cm.HostLayout `json:"-"`
	// Must be "image"
	ContentType string `json:"content-type"`

	// Base64-encoded data
	Data cm.List[uint8] `json:"data"`

	// MIME type of the image (e.g., "image/png")
	MIMEType string `json:"mime-type"`
}

// AudioContent represents the record "hayride:mcp/types@0.0.61#audio-content".
//
//	record audio-content {
//		content-type: string,
//		data: list<u8>,
//		mime-type: string,
//	}
type AudioContent struct {
	_ cm.HostLayout `json:"-"`
	// Must be "audio"
	ContentType string `json:"content-type"`

	// Base64-encoded audio data
	Data cm.List[uint8] `json:"data"`

	// MIME type of the audio (e.g., "audio/wav")
	MIMEType string `json:"mime-type"`
}

// ResourceLinkContent represents the record "hayride:mcp/types@0.0.61#resource-link-content".
//
//	record resource-link-content {
//		content-type: string,
//		uri: string,
//		name: string,
//		description: string,
//		mime-type: string,
//	}
type ResourceLinkContent struct {
	_ cm.HostLayout `json:"-"`
	// Must be "resource_link"
	ContentType string `json:"content-type"`

	// URI of the resource
	URI string `json:"uri"`

	// name of the resource
	Name string `json:"name"`

	// description of the resource
	Description string `json:"description"`

	// MIME type of the resource (e.g., "text/x-rust")
	MIMEType string `json:"mime-type"`
}

// TextResourceContents represents the record "hayride:mcp/types@0.0.61#text-resource-contents".
//
//	record text-resource-contents {
//		uri: string,
//		name: string,
//		title: string,
//		mime-type: string,
//		text: string,
//	}
type TextResourceContents struct {
	_ cm.HostLayout `json:"-"`
	// e.g. "file:///example.txt"
	URI string `json:"uri"`

	// e.g. "example.txt"
	Name string `json:"name"`

	// e.g. "Example Text File"
	Title string `json:"title"`

	// e.g. "text/plain"
	MIMEType string `json:"mime-type"`

	// e.g. "Resource content"
	Text string `json:"text"`
}

// BlobResourceContents represents the record "hayride:mcp/types@0.0.61#blob-resource-contents".
//
//	record blob-resource-contents {
//		uri: string,
//		name: string,
//		title: string,
//		mime-type: string,
//		blob: list<u8>,
//	}
type BlobResourceContents struct {
	_ cm.HostLayout `json:"-"`
	// e.g. "file:///example.png"
	URI string `json:"uri"`

	// e.g. "example.png"
	Name string `json:"name"`

	// e.g. "Example Image"
	Title string `json:"title"`

	// e.g. "image/png"
	MIMEType string `json:"mime-type"`

	// e.g. Base64-encoded binary data
	Blob cm.List[uint8] `json:"blob"`
}

// ResourceContents represents the variant "hayride:mcp/types@0.0.61#resource-contents".
//
// A resource can be either text or binary data.
//
//	variant resource-contents {
//		none,
//		text(text-resource-contents),
//		blob(blob-resource-contents),
//	}
type ResourceContents cm.Variant[uint8, TextResourceContentsShape, TextResourceContents]

// ResourceContentsNone returns a [ResourceContents] of case "none".
func ResourceContentsNone() ResourceContents {
	var data struct{}
	return cm.New[ResourceContents](0, data)
}

// None returns true if [ResourceContents] represents the variant case "none".
func (self *ResourceContents) None() bool {
	return self.Tag() == 0
}

// ResourceContentsText returns a [ResourceContents] of case "text".
func ResourceContentsText(data TextResourceContents) ResourceContents {
	return cm.New[ResourceContents](1, data)
}

// Text returns a non-nil *[TextResourceContents] if [ResourceContents] represents the variant case "text".
func (self *ResourceContents) Text() *TextResourceContents {
	return cm.Case[TextResourceContents](self, 1)
}

// ResourceContentsBlob returns a [ResourceContents] of case "blob".
func ResourceContentsBlob(data BlobResourceContents) ResourceContents {
	return cm.New[ResourceContents](2, data)
}

// Blob returns a non-nil *[BlobResourceContents] if [ResourceContents] represents the variant case "blob".
func (self *ResourceContents) Blob() *BlobResourceContents {
	return cm.Case[BlobResourceContents](self, 2)
}

var _ResourceContentsStrings = [3]string{
	"none",
	"text",
	"blob",
}

// String implements [fmt.Stringer], returning the variant case name of v.
func (v ResourceContents) String() string {
	return _ResourceContentsStrings[v.Tag()]
}

// EmbeddedResourceContent represents the record "hayride:mcp/types@0.0.61#embedded-resource-content".
//
//	record embedded-resource-content {
//		content-type: string,
//		resource-contents: resource-contents,
//	}
type EmbeddedResourceContent struct {
	_ cm.HostLayout `json:"-"`
	// Must be "resource"
	ContentType      string           `json:"content-type"`
	ResourceContents ResourceContents `json:"resource-contents"`
}

// Content represents the variant "hayride:mcp/types@0.0.61#content".
//
// A content is [TextContent], [ImageContent], [AudioContent],
// [ResourceLink], or [EmbeddedResource].
//
//	variant content {
//		none,
//		text(text-content),
//		image(image-content),
//		audio(audio-content),
//		resource-link(resource-link-content),
//		resource-content(embedded-resource-content),
//	}
type Content cm.Variant[uint8, EmbeddedResourceContentShape, EmbeddedResourceContent]

// ContentNone returns a [Content] of case "none".
func ContentNone() Content {
	var data struct{}
	return cm.New[Content](0, data)
}

// None returns true if [Content] represents the variant case "none".
func (self *Content) None() bool {
	return self.Tag() == 0
}

// ContentText returns a [Content] of case "text".
func ContentText(data TextContent) Content {
	return cm.New[Content](1, data)
}

// Text returns a non-nil *[TextContent] if [Content] represents the variant case "text".
func (self *Content) Text() *TextContent {
	return cm.Case[TextContent](self, 1)
}

// ContentImage returns a [Content] of case "image".
func ContentImage(data ImageContent) Content {
	return cm.New[Content](2, data)
}

// Image returns a non-nil *[ImageContent] if [Content] represents the variant case "image".
func (self *Content) Image() *ImageContent {
	return cm.Case[ImageContent](self, 2)
}

// ContentAudio returns a [Content] of case "audio".
func ContentAudio(data AudioContent) Content {
	return cm.New[Content](3, data)
}

// Audio returns a non-nil *[AudioContent] if [Content] represents the variant case "audio".
func (self *Content) Audio() *AudioContent {
	return cm.Case[AudioContent](self, 3)
}

// ContentResourceLink returns a [Content] of case "resource-link".
func ContentResourceLink(data ResourceLinkContent) Content {
	return cm.New[Content](4, data)
}

// ResourceLink returns a non-nil *[ResourceLinkContent] if [Content] represents the variant case "resource-link".
func (self *Content) ResourceLink() *ResourceLinkContent {
	return cm.Case[ResourceLinkContent](self, 4)
}

// ContentResourceContent returns a [Content] of case "resource-content".
func ContentResourceContent(data EmbeddedResourceContent) Content {
	return cm.New[Content](5, data)
}

// ResourceContent returns a non-nil *[EmbeddedResourceContent] if [Content] represents the variant case "resource-content".
func (self *Content) ResourceContent() *EmbeddedResourceContent {
	return cm.Case[EmbeddedResourceContent](self, 5)
}

var _ContentStrings = [6]string{
	"none",
	"text",
	"image",
	"audio",
	"resource-link",
	"resource-content",
}

// String implements [fmt.Stringer], returning the variant case name of v.
func (v Content) String() string {
	return _ContentStrings[v.Tag()]
}

// CallToolParams represents the record "hayride:mcp/types@0.0.61#call-tool-params".
//
//	record call-tool-params {
//		name: string,
//		arguments: list<tuple<string, string>>,
//	}
type CallToolParams struct {
	_ cm.HostLayout `json:"-"`
	// The name of the tool to call
	Name string `json:"name"`

	// The arguments to pass to the tool
	Arguments cm.List[[2]string] `json:"arguments"`
}

// CallToolResult represents the record "hayride:mcp/types@0.0.61#call-tool-result".
//
//	record call-tool-result {
//		content: list<content>,
//		structured-content: list<tuple<string, string>>,
//		is-error: bool,
//		meta: list<tuple<string, string>>,
//	}
type CallToolResult struct {
	_ cm.HostLayout `json:"-"`
	// unstructured content in the form of multiple content items
	Content cm.List[Content] `json:"content"`

	// structured content in the form of a JSON string
	StructuredContent cm.List[[2]string] `json:"structured-content"`

	// true for tool execution errors
	IsError bool               `json:"is-error"`
	Meta    cm.List[[2]string] `json:"meta"`
}

// ListToolsResult represents the record "hayride:mcp/types@0.0.61#list-tools-result".
//
//	record list-tools-result {
//		tools: list<tool>,
//		next-cursor: string,
//		meta: list<tuple<string, string>>,
//	}
type ListToolsResult struct {
	_          cm.HostLayout      `json:"-"`
	Tools      cm.List[Tool]      `json:"tools"`
	NextCursor string             `json:"next-cursor"`
	Meta       cm.List[[2]string] `json:"meta"`
}

// PromptArgument represents the record "hayride:mcp/types@0.0.61#prompt-argument".
//
//	record prompt-argument {
//		name: string,
//		title: string,
//		description: string,
//		required: bool,
//	}
type PromptArgument struct {
	_ cm.HostLayout `json:"-"`
	// The name of the argument
	Name string `json:"name"`

	// A human-readable title for the argument, useful for UI display
	Title string `json:"title"`

	// A human-readable description of the argument
	Description string `json:"description"`

	// Whether the argument must be provided
	Required bool `json:"required"`
}

// Prompt represents the record "hayride:mcp/types@0.0.61#prompt".
//
//	record prompt {
//		name: string,
//		title: string,
//		description: string,
//		arguments: list<prompt-argument>,
//		meta: list<tuple<string, string>>,
//	}
type Prompt struct {
	_ cm.HostLayout `json:"-"`
	// Name intended for programmatic use
	Name string `json:"name"`

	// A human-readable title for the prompt, useful for UI display
	Title string `json:"title"`

	// An optional description of what this prompt provides
	Description string `json:"description"`

	// A list of arguments to use for templating the prompt
	Arguments cm.List[PromptArgument] `json:"arguments"`
	Meta      cm.List[[2]string]      `json:"meta"`
}

// PromptRole represents the enum "hayride:mcp/types@0.0.61#prompt-role".
//
//	enum prompt-role {
//		user,
//		assistant,
//		unknown
//	}
type PromptRole uint8

const (
	PromptRoleUser PromptRole = iota
	PromptRoleAssistant
	PromptRoleUnknown
)

var _PromptRoleStrings = [3]string{
	"user",
	"assistant",
	"unknown",
}

// String implements [fmt.Stringer], returning the enum case name of e.
func (e PromptRole) String() string {
	return _PromptRoleStrings[e]
}

// MarshalText implements [encoding.TextMarshaler].
func (e PromptRole) MarshalText() ([]byte, error) {
	return []byte(e.String()), nil
}

// UnmarshalText implements [encoding.TextUnmarshaler], unmarshaling into an enum
// case. Returns an error if the supplied text is not one of the enum cases.
func (e *PromptRole) UnmarshalText(text []byte) error {
	return _PromptRoleUnmarshalCase(e, text)
}

var _PromptRoleUnmarshalCase = cm.CaseUnmarshaler[PromptRole](_PromptRoleStrings[:])

// PromptMessage represents the record "hayride:mcp/types@0.0.61#prompt-message".
//
//	record prompt-message {
//		role: prompt-role,
//		content: content,
//	}
type PromptMessage struct {
	_       cm.HostLayout `json:"-"`
	Role    PromptRole    `json:"role"`
	Content Content       `json:"content"`
}

// GetPromptParams represents the record "hayride:mcp/types@0.0.61#get-prompt-params".
//
//	record get-prompt-params {
//		name: string,
//		arguments: list<tuple<string, string>>,
//	}
type GetPromptParams struct {
	_ cm.HostLayout `json:"-"`
	// The name of the prompt or prompt template
	Name string `json:"name"`

	// Arguments to use for templating the prompt
	Arguments cm.List[[2]string] `json:"arguments"`
}

// GetPromptResult represents the record "hayride:mcp/types@0.0.61#get-prompt-result".
//
//	record get-prompt-result {
//		description: string,
//		messages: list<prompt-message>,
//		meta: list<tuple<string, string>>,
//	}
type GetPromptResult struct {
	_           cm.HostLayout          `json:"-"`
	Description string                 `json:"description"`
	Messages    cm.List[PromptMessage] `json:"messages"`
	Meta        cm.List[[2]string]     `json:"meta"`
}

// ListPromptsResult represents the record "hayride:mcp/types@0.0.61#list-prompts-result".
//
//	record list-prompts-result {
//		prompts: list<prompt>,
//		next-cursor: string,
//		meta: list<tuple<string, string>>,
//	}
type ListPromptsResult struct {
	_          cm.HostLayout      `json:"-"`
	Prompts    cm.List[Prompt]    `json:"prompts"`
	NextCursor string             `json:"next-cursor"`
	Meta       cm.List[[2]string] `json:"meta"`
}

// ReadResourceParams represents the record "hayride:mcp/types@0.0.61#read-resource-params".
//
//	record read-resource-params {
//		uri: string,
//	}
type ReadResourceParams struct {
	_   cm.HostLayout `json:"-"`
	URI string        `json:"uri"`
}

// ReadResourceResult represents the record "hayride:mcp/types@0.0.61#read-resource-result".
//
//	record read-resource-result {
//		contents: list<resource-contents>,
//	}
type ReadResourceResult struct {
	_ cm.HostLayout `json:"-"`
	// The resource contents
	Contents cm.List[ResourceContents] `json:"contents"`
}

// ListResourcesResult represents the record "hayride:mcp/types@0.0.61#list-resources-result".
//
//	record list-resources-result {
//		resources: list<mcp-resource>,
//		next-cursor: string,
//		meta: list<tuple<string, string>>,
//	}
type ListResourcesResult struct {
	_          cm.HostLayout        `json:"-"`
	Resources  cm.List[McpResource] `json:"resources"`
	NextCursor string               `json:"next-cursor"`
	Meta       cm.List[[2]string]   `json:"meta"`
}

// ListResourceTemplatesResult represents the record "hayride:mcp/types@0.0.61#list-resource-templates-result".
//
//	record list-resource-templates-result {
//		templates: list<mcp-resource-template>,
//		next-cursor: string,
//		meta: list<tuple<string, string>>,
//	}
type ListResourceTemplatesResult struct {
	_          cm.HostLayout                `json:"-"`
	Templates  cm.List[McpResourceTemplate] `json:"templates"`
	NextCursor string                       `json:"next-cursor"`
	Meta       cm.List[[2]string]           `json:"meta"`
}
