// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package auth represents the imported interface "hayride:mcp/auth@0.0.65".
package auth

import (
	"go.bytecodealliance.org/cm"
)

// ErrorCode represents the enum "hayride:mcp/auth@0.0.65#error-code".
//
//	enum error-code {
//		auth-url-failed,
//		registration-failed,
//		exchange-code-failed,
//		validate-failed,
//		unknown
//	}
type ErrorCode uint8

const (
	ErrorCodeAuthURLFailed ErrorCode = iota
	ErrorCodeRegistrationFailed
	ErrorCodeExchangeCodeFailed
	ErrorCodeValidateFailed
	ErrorCodeUnknown
)

var _ErrorCodeStrings = [5]string{
	"auth-url-failed",
	"registration-failed",
	"exchange-code-failed",
	"validate-failed",
	"unknown",
}

// String implements [fmt.Stringer], returning the enum case name of e.
func (e ErrorCode) String() string {
	return _ErrorCodeStrings[e]
}

// MarshalText implements [encoding.TextMarshaler].
func (e ErrorCode) MarshalText() ([]byte, error) {
	return []byte(e.String()), nil
}

// UnmarshalText implements [encoding.TextUnmarshaler], unmarshaling into an enum
// case. Returns an error if the supplied text is not one of the enum cases.
func (e *ErrorCode) UnmarshalText(text []byte) error {
	return _ErrorCodeUnmarshalCase(e, text)
}

var _ErrorCodeUnmarshalCase = cm.CaseUnmarshaler[ErrorCode](_ErrorCodeStrings[:])

// Error represents the imported resource "hayride:mcp/auth@0.0.65#error".
//
//	resource error
type Error cm.Resource

// ResourceDrop represents the imported resource-drop for resource "error".
//
// Drops a resource handle.
//
//go:nosplit
func (self Error) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_ErrorResourceDrop((uint32)(self0))
	return
}

// Code represents the imported method "code".
//
// return the error code.
//
//	code: func() -> error-code
//
//go:nosplit
func (self Error) Code() (result ErrorCode) {
	self0 := cm.Reinterpret[uint32](self)
	result0 := wasmimport_ErrorCode((uint32)(self0))
	result = (ErrorCode)((uint32)(result0))
	return
}

// Data represents the imported method "data".
//
// errors can propagated with backend specific status through a string value.
//
//	data: func() -> string
//
//go:nosplit
func (self Error) Data() (result string) {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_ErrorData((uint32)(self0), &result)
	return
}

// Provider represents the imported resource "hayride:mcp/auth@0.0.65#provider".
//
// provider allows for proxy authentication
//
//	resource provider
type Provider cm.Resource

// ResourceDrop represents the imported resource-drop for resource "provider".
//
// Drops a resource handle.
//
//go:nosplit
func (self Provider) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_ProviderResourceDrop((uint32)(self0))
	return
}

// NewProvider represents the imported constructor for resource "provider".
//
// Construct a provider with the given config key/value pairs
//
//	constructor()
//
//go:nosplit
func NewProvider() (result Provider) {
	result0 := wasmimport_NewProvider()
	result = cm.Reinterpret[Provider]((uint32)(result0))
	return
}

// AuthURL represents the imported method "auth-url".
//
// Return the url to use for authorization
//
//	auth-url: func() -> result<string, error>
//
//go:nosplit
func (self Provider) AuthURL() (result cm.Result[string, string, Error]) {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_ProviderAuthURL((uint32)(self0), &result)
	return
}

// ExchangeCode represents the imported method "exchange-code".
//
// Exchange code for token, takes the body of the token request and returns auth token
//
//	exchange-code: func(data: list<u8>) -> result<list<u8>, error>
//
//go:nosplit
func (self Provider) ExchangeCode(data cm.List[uint8]) (result cm.Result[cm.List[uint8], cm.List[uint8], Error]) {
	self0 := cm.Reinterpret[uint32](self)
	data0, data1 := cm.LowerList(data)
	wasmimport_ProviderExchangeCode((uint32)(self0), (*uint8)(data0), (uint32)(data1), &result)
	return
}

// Registration represents the imported method "registration".
//
// Dynamic Registration for a new client should use the provided data for a registration
// request and return client info
//
//	registration: func(data: list<u8>) -> result<list<u8>, error>
//
//go:nosplit
func (self Provider) Registration(data cm.List[uint8]) (result cm.Result[cm.List[uint8], cm.List[uint8], Error]) {
	self0 := cm.Reinterpret[uint32](self)
	data0, data1 := cm.LowerList(data)
	wasmimport_ProviderRegistration((uint32)(self0), (*uint8)(data0), (uint32)(data1), &result)
	return
}

// Validate represents the imported method "validate".
//
// Validate the bearer token, returning true if valid
//
//	validate: func(token: string) -> result<bool, error>
//
//go:nosplit
func (self Provider) Validate(token string) (result cm.Result[Error, bool, Error]) {
	self0 := cm.Reinterpret[uint32](self)
	token0, token1 := cm.LowerString(token)
	wasmimport_ProviderValidate((uint32)(self0), (*uint8)(token0), (uint32)(token1), &result)
	return
}
