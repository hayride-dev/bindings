// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package wac represents the imported interface "hayride:wac/wac@0.0.63".
package wac

import (
	"github.com/hayride-dev/bindings/go/internal/gen/imports/hayride/wac/types"
	"go.bytecodealliance.org/cm"
)

// ErrorCode represents the type alias "hayride:wac/wac@0.0.63#error-code".
//
// See [types.ErrorCode] for more information.
type ErrorCode = types.ErrorCode

// Error represents the imported resource "hayride:wac/wac@0.0.63#error".
//
//	resource error
type Error cm.Resource

// ResourceDrop represents the imported resource-drop for resource "error".
//
// Drops a resource handle.
//
//go:nosplit
func (self Error) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_ErrorResourceDrop((uint32)(self0))
	return
}

// Code represents the imported method "code".
//
// Return the error code.
//
//	code: func() -> error-code
//
//go:nosplit
func (self Error) Code() (result ErrorCode) {
	self0 := cm.Reinterpret[uint32](self)
	result0 := wasmimport_ErrorCode((uint32)(self0))
	result = (types.ErrorCode)((uint32)(result0))
	return
}

// Data represents the imported method "data".
//
// Errors can propagated with backend specific status through a string value.
//
//	data: func() -> string
//
//go:nosplit
func (self Error) Data() (result string) {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_ErrorData((uint32)(self0), &result)
	return
}

// Compose represents the imported function "compose".
//
//	compose: func(contents: string) -> result<list<u8>, error>
//
//go:nosplit
func Compose(contents string) (result cm.Result[cm.List[uint8], cm.List[uint8], Error]) {
	contents0, contents1 := cm.LowerString(contents)
	wasmimport_Compose((*uint8)(contents0), (uint32)(contents1), &result)
	return
}

// Plug represents the imported function "plug".
//
//	plug: func(socket-pkg: string, plug-pkgs: list<string>) -> result<list<u8>, error>
//
//go:nosplit
func Plug(socketPkg string, plugPkgs cm.List[string]) (result cm.Result[cm.List[uint8], cm.List[uint8], Error]) {
	socketPkg0, socketPkg1 := cm.LowerString(socketPkg)
	plugPkgs0, plugPkgs1 := cm.LowerList(plugPkgs)
	wasmimport_Plug((*uint8)(socketPkg0), (uint32)(socketPkg1), (*string)(plugPkgs0), (uint32)(plugPkgs1), &result)
	return
}
