// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package wac represents the imported interface "hayride:wac/wac@0.0.59".
package wac

import (
	"github.com/hayride-dev/bindings/go/internal/gen/imports/hayride/wac/types"
	"go.bytecodealliance.org/cm"
)

// Error represents the imported type alias "hayride:wac/wac@0.0.59#error".
//
// See [types.Error] for more information.
type Error = types.Error

// Compose represents the imported function "compose".
//
//	compose: func(contents: string) -> result<list<u8>, error>
//
//go:nosplit
func Compose(contents string) (result cm.Result[cm.List[uint8], cm.List[uint8], Error]) {
	contents0, contents1 := cm.LowerString(contents)
	wasmimport_Compose((*uint8)(contents0), (uint32)(contents1), &result)
	return
}

// Plug represents the imported function "plug".
//
//	plug: func(socket-pkg: string, plug-pkgs: list<string>) -> result<list<u8>, error>
//
//go:nosplit
func Plug(socketPkg string, plugPkgs cm.List[string]) (result cm.Result[cm.List[uint8], cm.List[uint8], Error]) {
	socketPkg0, socketPkg1 := cm.LowerString(socketPkg)
	plugPkgs0, plugPkgs1 := cm.LowerList(plugPkgs)
	wasmimport_Plug((*uint8)(socketPkg0), (uint32)(socketPkg1), (*string)(plugPkgs0), (uint32)(plugPkgs1), &result)
	return
}
