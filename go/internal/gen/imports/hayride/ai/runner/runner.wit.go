// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package runner represents the imported interface "hayride:ai/runner@0.0.65".
package runner

import (
	"github.com/hayride-dev/bindings/go/internal/gen/imports/hayride/ai/agents"
	graphstream "github.com/hayride-dev/bindings/go/internal/gen/imports/hayride/ai/graph-stream"
	inferencestream "github.com/hayride-dev/bindings/go/internal/gen/imports/hayride/ai/inference-stream"
	"github.com/hayride-dev/bindings/go/internal/gen/imports/hayride/ai/model"
	tensorstream "github.com/hayride-dev/bindings/go/internal/gen/imports/hayride/ai/tensor-stream"
	"github.com/hayride-dev/bindings/go/internal/gen/imports/hayride/ai/types"
	types_ "github.com/hayride-dev/bindings/go/internal/gen/imports/wasi/http/types"
	"github.com/hayride-dev/bindings/go/internal/gen/imports/wasi/io/streams"
	"go.bytecodealliance.org/cm"
)

// Message represents the type alias "hayride:ai/runner@0.0.65#message".
//
// See [types.Message] for more information.
type Message = types.Message

// RunnerOptions represents the type alias "hayride:ai/runner@0.0.65#runner-options".
//
// See [types.RunnerOptions] for more information.
type RunnerOptions = types.RunnerOptions

// Agent represents the imported type alias "hayride:ai/runner@0.0.65#agent".
//
// See [agents.Agent] for more information.
type Agent = agents.Agent

// Format represents the imported type alias "hayride:ai/runner@0.0.65#format".
//
// See [model.Format] for more information.
type Format = model.Format

// OutputStream represents the imported type alias "hayride:ai/runner@0.0.65#output-stream".
//
// See [streams.OutputStream] for more information.
type OutputStream = streams.OutputStream

// TensorStream represents the imported type alias "hayride:ai/runner@0.0.65#tensor-stream".
//
// See [tensorstream.TensorStream] for more information.
type TensorStream = tensorstream.TensorStream

// GraphExecutionContextStream represents the imported type alias "hayride:ai/runner@0.0.65#graph-execution-context-stream".
//
// See [inferencestream.GraphExecutionContextStream] for more information.
type GraphExecutionContextStream = inferencestream.GraphExecutionContextStream

// GraphStream represents the imported type alias "hayride:ai/runner@0.0.65#graph-stream".
//
// See [graphstream.GraphStream] for more information.
type GraphStream = graphstream.GraphStream

// Fields represents the imported type alias "hayride:ai/runner@0.0.65#fields".
//
// See [types_.Fields] for more information.
type Fields = types_.Fields

// ResponseOutparam represents the imported type alias "hayride:ai/runner@0.0.65#response-outparam".
//
// See [types_.ResponseOutparam] for more information.
type ResponseOutparam = types_.ResponseOutparam

// OutgoingResponse represents the imported type alias "hayride:ai/runner@0.0.65#outgoing-response".
//
// See [types_.OutgoingResponse] for more information.
type OutgoingResponse = types_.OutgoingResponse

// OutgoingBody represents the imported type alias "hayride:ai/runner@0.0.65#outgoing-body".
//
// See [types_.OutgoingBody] for more information.
type OutgoingBody = types_.OutgoingBody

// ErrorCode represents the enum "hayride:ai/runner@0.0.65#error-code".
//
//	enum error-code {
//		invoke-error,
//		unknown
//	}
type ErrorCode uint8

const (
	ErrorCodeInvokeError ErrorCode = iota
	ErrorCodeUnknown
)

var _ErrorCodeStrings = [2]string{
	"invoke-error",
	"unknown",
}

// String implements [fmt.Stringer], returning the enum case name of e.
func (e ErrorCode) String() string {
	return _ErrorCodeStrings[e]
}

// MarshalText implements [encoding.TextMarshaler].
func (e ErrorCode) MarshalText() ([]byte, error) {
	return []byte(e.String()), nil
}

// UnmarshalText implements [encoding.TextUnmarshaler], unmarshaling into an enum
// case. Returns an error if the supplied text is not one of the enum cases.
func (e *ErrorCode) UnmarshalText(text []byte) error {
	return _ErrorCodeUnmarshalCase(e, text)
}

var _ErrorCodeUnmarshalCase = cm.CaseUnmarshaler[ErrorCode](_ErrorCodeStrings[:])

// Error represents the imported resource "hayride:ai/runner@0.0.65#error".
//
//	resource error
type Error cm.Resource

// ResourceDrop represents the imported resource-drop for resource "error".
//
// Drops a resource handle.
//
//go:nosplit
func (self Error) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_ErrorResourceDrop((uint32)(self0))
	return
}

// Code represents the imported method "code".
//
// return the error code.
//
//	code: func() -> error-code
//
//go:nosplit
func (self Error) Code() (result ErrorCode) {
	self0 := cm.Reinterpret[uint32](self)
	result0 := wasmimport_ErrorCode((uint32)(self0))
	result = (ErrorCode)((uint32)(result0))
	return
}

// Data represents the imported method "data".
//
// errors can propagated with backend specific status through a string value.
//
//	data: func() -> string
//
//go:nosplit
func (self Error) Data() (result string) {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_ErrorData((uint32)(self0), &result)
	return
}

// Runner represents the imported resource "hayride:ai/runner@0.0.65#runner".
//
//	resource runner
type Runner cm.Resource

// ResourceDrop represents the imported resource-drop for resource "runner".
//
// Drops a resource handle.
//
//go:nosplit
func (self Runner) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_RunnerResourceDrop((uint32)(self0))
	return
}

// NewRunner represents the imported constructor for resource "runner".
//
//	constructor(options: runner-options)
//
//go:nosplit
func NewRunner(options RunnerOptions) (result Runner) {
	options0, options1 := lower_RunnerOptions(options)
	result0 := wasmimport_NewRunner((uint32)(options0), (uint32)(options1))
	result = cm.Reinterpret[Runner]((uint32)(result0))
	return
}

// Invoke represents the imported method "invoke".
//
//	invoke: func(message: message, agent: borrow<agent>, format: borrow<format>, graph:
//	borrow<graph-execution-context-stream>, output-stream: option<borrow<output-stream>>)
//	-> result<list<message>, error>
//
//go:nosplit
func (self Runner) Invoke(message Message, agent Agent, format Format, graph GraphExecutionContextStream, outputStream cm.Option[OutputStream]) (result cm.Result[cm.List[Message], cm.List[Message], Error]) {
	self0 := cm.Reinterpret[uint32](self)
	message0, message1, message2, message3 := lower_Message(message)
	agent0 := cm.Reinterpret[uint32](agent)
	format0 := cm.Reinterpret[uint32](format)
	graph0 := cm.Reinterpret[uint32](graph)
	outputStream0, outputStream1 := lower_OptionBorrowOutputStream(outputStream)
	wasmimport_RunnerInvoke((uint32)(self0), (uint32)(message0), (*types.MessageContent)(message1), (uint32)(message2), (uint32)(message3), (uint32)(agent0), (uint32)(format0), (uint32)(graph0), (uint32)(outputStream0), (uint32)(outputStream1), &result)
	return
}
