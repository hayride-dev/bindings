// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package rag represents the imported interface "hayride:ai/rag@0.0.46".
package rag

import (
	"github.com/hayride-dev/bindings/go/internal/gen/imports/hayride/ai/transformer"
	"go.bytecodealliance.org/cm"
)

// Transformer represents the imported type alias "hayride:ai/rag@0.0.46#transformer".
//
// See [transformer.Transformer] for more information.
type Transformer = transformer.Transformer

// ErrorCode represents the enum "hayride:ai/rag@0.0.46#error-code".
//
//	enum error-code {
//		connection-failed,
//		create-table-failed,
//		query-failed,
//		embed-failed,
//		register-failed,
//		missing-table,
//		invalid-option,
//		not-enabled,
//		unknown
//	}
type ErrorCode uint8

const (
	ErrorCodeConnectionFailed ErrorCode = iota
	ErrorCodeCreateTableFailed
	ErrorCodeQueryFailed
	ErrorCodeEmbedFailed
	ErrorCodeRegisterFailed
	ErrorCodeMissingTable
	ErrorCodeInvalidOption
	ErrorCodeNotEnabled
	ErrorCodeUnknown
)

var _ErrorCodeStrings = [9]string{
	"connection-failed",
	"create-table-failed",
	"query-failed",
	"embed-failed",
	"register-failed",
	"missing-table",
	"invalid-option",
	"not-enabled",
	"unknown",
}

// String implements [fmt.Stringer], returning the enum case name of e.
func (e ErrorCode) String() string {
	return _ErrorCodeStrings[e]
}

// MarshalText implements [encoding.TextMarshaler].
func (e ErrorCode) MarshalText() ([]byte, error) {
	return []byte(e.String()), nil
}

// UnmarshalText implements [encoding.TextUnmarshaler], unmarshaling into an enum
// case. Returns an error if the supplied text is not one of the enum cases.
func (e *ErrorCode) UnmarshalText(text []byte) error {
	return _ErrorCodeUnmarshalCase(e, text)
}

var _ErrorCodeUnmarshalCase = cm.CaseUnmarshaler[ErrorCode](_ErrorCodeStrings[:])

// Error represents the imported resource "hayride:ai/rag@0.0.46#error".
//
//	resource error
type Error cm.Resource

// ResourceDrop represents the imported resource-drop for resource "error".
//
// Drops a resource handle.
//
//go:nosplit
func (self Error) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_ErrorResourceDrop((uint32)(self0))
	return
}

// Code represents the imported method "code".
//
// return the error code.
//
//	code: func() -> error-code
//
//go:nosplit
func (self Error) Code() (result ErrorCode) {
	self0 := cm.Reinterpret[uint32](self)
	result0 := wasmimport_ErrorCode((uint32)(self0))
	result = (ErrorCode)((uint32)(result0))
	return
}

// Data represents the imported method "data".
//
// errors can propagated with backend specific status through a string value.
//
//	data: func() -> string
//
//go:nosplit
func (self Error) Data() (result string) {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_ErrorData((uint32)(self0), &result)
	return
}

// RagOption represents the tuple "hayride:ai/rag@0.0.46#rag-option".
//
//	type rag-option = tuple<string, string>
type RagOption [2]string

// Connection represents the imported resource "hayride:ai/rag@0.0.46#connection".
//
//	resource connection
type Connection cm.Resource

// ResourceDrop represents the imported resource-drop for resource "connection".
//
// Drops a resource handle.
//
//go:nosplit
func (self Connection) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_ConnectionResourceDrop((uint32)(self0))
	return
}

// Embed represents the imported method "embed".
//
//	embed: func(table: string, data: string) -> result<_, error>
//
//go:nosplit
func (self Connection) Embed(table string, data string) (result cm.Result[Error, struct{}, Error]) {
	self0 := cm.Reinterpret[uint32](self)
	table0, table1 := cm.LowerString(table)
	data0, data1 := cm.LowerString(data)
	wasmimport_ConnectionEmbed((uint32)(self0), (*uint8)(table0), (uint32)(table1), (*uint8)(data0), (uint32)(data1), &result)
	return
}

// Query represents the imported method "query".
//
//	query: func(table: string, data: string, options: list<rag-option>) -> result<list<string>,
//	error>
//
//go:nosplit
func (self Connection) Query(table string, data string, options cm.List[RagOption]) (result cm.Result[cm.List[string], cm.List[string], Error]) {
	self0 := cm.Reinterpret[uint32](self)
	table0, table1 := cm.LowerString(table)
	data0, data1 := cm.LowerString(data)
	options0, options1 := cm.LowerList(options)
	wasmimport_ConnectionQuery((uint32)(self0), (*uint8)(table0), (uint32)(table1), (*uint8)(data0), (uint32)(data1), (*RagOption)(options0), (uint32)(options1), &result)
	return
}

// Register represents the imported method "register".
//
//	register: func(transformer: transformer) -> result<_, error>
//
//go:nosplit
func (self Connection) Register(transformer_ Transformer) (result cm.Result[Error, struct{}, Error]) {
	self0 := cm.Reinterpret[uint32](self)
	transformer0 := cm.Reinterpret[uint32](transformer_)
	wasmimport_ConnectionRegister((uint32)(self0), (uint32)(transformer0), &result)
	return
}

// Connect represents the imported function "connect".
//
//	connect: func(dsn: string) -> result<connection, error>
//
//go:nosplit
func Connect(dsn string) (result cm.Result[Connection, Connection, Error]) {
	dsn0, dsn1 := cm.LowerString(dsn)
	wasmimport_Connect((*uint8)(dsn0), (uint32)(dsn1), &result)
	return
}
