// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package agents represents the imported interface "hayride:ai/agents@0.0.65".
package agents

import (
	"github.com/hayride-dev/bindings/go/internal/gen/imports/hayride/ai/context"
	"github.com/hayride-dev/bindings/go/internal/gen/imports/hayride/ai/types"
	"github.com/hayride-dev/bindings/go/internal/gen/imports/hayride/mcp/tools"
	types_ "github.com/hayride-dev/bindings/go/internal/gen/imports/hayride/mcp/types"
	"go.bytecodealliance.org/cm"
)

// Message represents the type alias "hayride:ai/agents@0.0.65#message".
//
// See [types.Message] for more information.
type Message = types.Message

// Context represents the imported type alias "hayride:ai/agents@0.0.65#context".
//
// See [context.Context] for more information.
type Context = context.Context

// Tools represents the imported type alias "hayride:ai/agents@0.0.65#tools".
//
// See [tools.Tools] for more information.
type Tools = tools.Tools

// Tool represents the type alias "hayride:ai/agents@0.0.65#tool".
//
// See [types_.Tool] for more information.
type Tool = types_.Tool

// CallToolParams represents the type alias "hayride:ai/agents@0.0.65#call-tool-params".
//
// See [types_.CallToolParams] for more information.
type CallToolParams = types_.CallToolParams

// CallToolResult represents the type alias "hayride:ai/agents@0.0.65#call-tool-result".
//
// See [types_.CallToolResult] for more information.
type CallToolResult = types_.CallToolResult

// ErrorCode represents the enum "hayride:ai/agents@0.0.65#error-code".
//
//	enum error-code {
//		capabilities-error,
//		context-error,
//		push-error,
//		execute-error,
//		unknown
//	}
type ErrorCode uint8

const (
	ErrorCodeCapabilitiesError ErrorCode = iota
	ErrorCodeContextError
	ErrorCodePushError
	ErrorCodeExecuteError
	ErrorCodeUnknown
)

var _ErrorCodeStrings = [5]string{
	"capabilities-error",
	"context-error",
	"push-error",
	"execute-error",
	"unknown",
}

// String implements [fmt.Stringer], returning the enum case name of e.
func (e ErrorCode) String() string {
	return _ErrorCodeStrings[e]
}

// MarshalText implements [encoding.TextMarshaler].
func (e ErrorCode) MarshalText() ([]byte, error) {
	return []byte(e.String()), nil
}

// UnmarshalText implements [encoding.TextUnmarshaler], unmarshaling into an enum
// case. Returns an error if the supplied text is not one of the enum cases.
func (e *ErrorCode) UnmarshalText(text []byte) error {
	return _ErrorCodeUnmarshalCase(e, text)
}

var _ErrorCodeUnmarshalCase = cm.CaseUnmarshaler[ErrorCode](_ErrorCodeStrings[:])

// Error represents the imported resource "hayride:ai/agents@0.0.65#error".
//
//	resource error
type Error cm.Resource

// ResourceDrop represents the imported resource-drop for resource "error".
//
// Drops a resource handle.
//
//go:nosplit
func (self Error) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_ErrorResourceDrop((uint32)(self0))
	return
}

// Code represents the imported method "code".
//
// return the error code.
//
//	code: func() -> error-code
//
//go:nosplit
func (self Error) Code() (result ErrorCode) {
	self0 := cm.Reinterpret[uint32](self)
	result0 := wasmimport_ErrorCode((uint32)(self0))
	result = (ErrorCode)((uint32)(result0))
	return
}

// Data represents the imported method "data".
//
// errors can propagated with backend specific status through a string value.
//
//	data: func() -> string
//
//go:nosplit
func (self Error) Data() (result string) {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_ErrorData((uint32)(self0), &result)
	return
}

// Agent represents the imported resource "hayride:ai/agents@0.0.65#agent".
//
//	resource agent
type Agent cm.Resource

// ResourceDrop represents the imported resource-drop for resource "agent".
//
// Drops a resource handle.
//
//go:nosplit
func (self Agent) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_AgentResourceDrop((uint32)(self0))
	return
}

// NewAgent represents the imported constructor for resource "agent".
//
//	constructor(name: string, instruction: string, tools: option<tools>, context: option<context>)
//
//go:nosplit
func NewAgent(name string, instruction string, tools_ cm.Option[Tools], context_ cm.Option[Context]) (result Agent) {
	name0, name1 := cm.LowerString(name)
	instruction0, instruction1 := cm.LowerString(instruction)
	tools0, tools1 := lower_OptionTools(tools_)
	context0, context1 := lower_OptionContext(context_)
	result0 := wasmimport_NewAgent((*uint8)(name0), (uint32)(name1), (*uint8)(instruction0), (uint32)(instruction1), (uint32)(tools0), (uint32)(tools1), (uint32)(context0), (uint32)(context1))
	result = cm.Reinterpret[Agent]((uint32)(result0))
	return
}

// Capabilities represents the imported method "capabilities".
//
//	capabilities: func() -> result<list<tool>, error>
//
//go:nosplit
func (self Agent) Capabilities() (result cm.Result[cm.List[Tool], cm.List[Tool], Error]) {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_AgentCapabilities((uint32)(self0), &result)
	return
}

// Context represents the imported method "context".
//
//	context: func() -> result<list<message>, error>
//
//go:nosplit
func (self Agent) Context() (result cm.Result[cm.List[Message], cm.List[Message], Error]) {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_AgentContext((uint32)(self0), &result)
	return
}

// Execute represents the imported method "execute".
//
//	execute: func(params: call-tool-params) -> result<call-tool-result, error>
//
//go:nosplit
func (self Agent) Execute(params CallToolParams) (result cm.Result[CallToolResultShape, CallToolResult, Error]) {
	self0 := cm.Reinterpret[uint32](self)
	params0, params1, params2, params3 := lower_CallToolParams(params)
	wasmimport_AgentExecute((uint32)(self0), (*uint8)(params0), (uint32)(params1), (*[2]string)(params2), (uint32)(params3), &result)
	return
}

// Instruction represents the imported method "instruction".
//
//	instruction: func() -> string
//
//go:nosplit
func (self Agent) Instruction() (result string) {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_AgentInstruction((uint32)(self0), &result)
	return
}

// Name represents the imported method "name".
//
//	name: func() -> string
//
//go:nosplit
func (self Agent) Name() (result string) {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_AgentName((uint32)(self0), &result)
	return
}

// Push represents the imported method "push".
//
//	push: func(msg: message) -> result<_, error>
//
//go:nosplit
func (self Agent) Push(msg Message) (result cm.Result[Error, struct{}, Error]) {
	self0 := cm.Reinterpret[uint32](self)
	msg0, msg1, msg2, msg3 := lower_Message(msg)
	wasmimport_AgentPush((uint32)(self0), (uint32)(msg0), (*types.MessageContent)(msg1), (uint32)(msg2), (uint32)(msg3), &result)
	return
}
