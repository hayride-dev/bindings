// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package agent represents the imported interface "hayride:ai/agent@0.0.44".
package agent

import (
	"github.com/hayride-dev/bindings/go/internal/gen/imports/hayride/ai/types"
	"github.com/hayride-dev/bindings/go/internal/gen/imports/wasi/io/streams"
	"go.bytecodealliance.org/cm"
)

// Message represents the type alias "hayride:ai/agent@0.0.44#message".
//
// See [types.Message] for more information.
type Message = types.Message

// OutputStream represents the imported type alias "hayride:ai/agent@0.0.44#output-stream".
//
// See [streams.OutputStream] for more information.
type OutputStream = streams.OutputStream

// ErrorCode represents the enum "hayride:ai/agent@0.0.44#error-code".
//
//	enum error-code {
//		invoke-error,
//		unknown
//	}
type ErrorCode uint8

const (
	ErrorCodeInvokeError ErrorCode = iota
	ErrorCodeUnknown
)

var _ErrorCodeStrings = [2]string{
	"invoke-error",
	"unknown",
}

// String implements [fmt.Stringer], returning the enum case name of e.
func (e ErrorCode) String() string {
	return _ErrorCodeStrings[e]
}

// MarshalText implements [encoding.TextMarshaler].
func (e ErrorCode) MarshalText() ([]byte, error) {
	return []byte(e.String()), nil
}

// UnmarshalText implements [encoding.TextUnmarshaler], unmarshaling into an enum
// case. Returns an error if the supplied text is not one of the enum cases.
func (e *ErrorCode) UnmarshalText(text []byte) error {
	return _ErrorCodeUnmarshalCase(e, text)
}

var _ErrorCodeUnmarshalCase = cm.CaseUnmarshaler[ErrorCode](_ErrorCodeStrings[:])

// Error represents the imported resource "hayride:ai/agent@0.0.44#error".
//
//	resource error
type Error cm.Resource

// ResourceDrop represents the imported resource-drop for resource "error".
//
// Drops a resource handle.
//
//go:nosplit
func (self Error) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_ErrorResourceDrop((uint32)(self0))
	return
}

// Code represents the imported method "code".
//
// return the error code.
//
//	code: func() -> error-code
//
//go:nosplit
func (self Error) Code() (result ErrorCode) {
	self0 := cm.Reinterpret[uint32](self)
	result0 := wasmimport_ErrorCode((uint32)(self0))
	result = (ErrorCode)((uint32)(result0))
	return
}

// Data represents the imported method "data".
//
// errors can propagated with backend specific status through a string value.
//
//	data: func() -> string
//
//go:nosplit
func (self Error) Data() (result string) {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_ErrorData((uint32)(self0), &result)
	return
}

// Agent represents the imported resource "hayride:ai/agent@0.0.44#agent".
//
//	resource agent
type Agent cm.Resource

// ResourceDrop represents the imported resource-drop for resource "agent".
//
// Drops a resource handle.
//
//go:nosplit
func (self Agent) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_AgentResourceDrop((uint32)(self0))
	return
}

// NewAgent represents the imported constructor for resource "agent".
//
//	constructor()
//
//go:nosplit
func NewAgent() (result Agent) {
	result0 := wasmimport_NewAgent()
	result = cm.Reinterpret[Agent]((uint32)(result0))
	return
}

// Invoke represents the imported method "invoke".
//
//	invoke: func(messages: list<message>) -> result<list<message>, error>
//
//go:nosplit
func (self Agent) Invoke(messages cm.List[Message]) (result cm.Result[cm.List[Message], cm.List[Message], Error]) {
	self0 := cm.Reinterpret[uint32](self)
	messages0, messages1 := cm.LowerList(messages)
	wasmimport_AgentInvoke((uint32)(self0), (*Message)(messages0), (uint32)(messages1), &result)
	return
}

// InvokeStream represents the imported method "invoke-stream".
//
//	invoke-stream: func(messages: list<message>, writer: output-stream) -> result<_,
//	error>
//
//go:nosplit
func (self Agent) InvokeStream(messages cm.List[Message], writer OutputStream) (result cm.Result[Error, struct{}, Error]) {
	self0 := cm.Reinterpret[uint32](self)
	messages0, messages1 := cm.LowerList(messages)
	writer0 := cm.Reinterpret[uint32](writer)
	wasmimport_AgentInvokeStream((uint32)(self0), (*Message)(messages0), (uint32)(messages1), (uint32)(writer0), &result)
	return
}
