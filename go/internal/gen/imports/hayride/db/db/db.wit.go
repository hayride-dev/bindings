// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package db represents the imported interface "hayride:db/db@0.0.65".
package db

import (
	"github.com/hayride-dev/bindings/go/internal/gen/imports/hayride/db/types"
	"go.bytecodealliance.org/cm"
)

// DbValue represents the type alias "hayride:db/db@0.0.65#db-value".
//
// See [types.DbValue] for more information.
type DbValue = types.DbValue

// IsolationLevel represents the type alias "hayride:db/db@0.0.65#isolation-level".
//
// See [types.IsolationLevel] for more information.
type IsolationLevel = types.IsolationLevel

// Row represents the type alias "hayride:db/db@0.0.65#row".
//
// See [types.Row] for more information.
type Row = types.Row

// ErrorCode represents the enum "hayride:db/db@0.0.65#error-code".
//
//	enum error-code {
//		open-failed,
//		query-failed,
//		execute-failed,
//		prepare-failed,
//		close-failed,
//		number-parameters-failed,
//		begin-transaction-failed,
//		commit-failed,
//		rollback-failed,
//		next-failed,
//		end-of-rows,
//		not-enabled,
//		unknown
//	}
type ErrorCode uint8

const (
	ErrorCodeOpenFailed ErrorCode = iota
	ErrorCodeQueryFailed
	ErrorCodeExecuteFailed
	ErrorCodePrepareFailed
	ErrorCodeCloseFailed
	ErrorCodeNumberParametersFailed
	ErrorCodeBeginTransactionFailed
	ErrorCodeCommitFailed
	ErrorCodeRollbackFailed
	ErrorCodeNextFailed
	ErrorCodeEndOfRows
	ErrorCodeNotEnabled
	ErrorCodeUnknown
)

var _ErrorCodeStrings = [13]string{
	"open-failed",
	"query-failed",
	"execute-failed",
	"prepare-failed",
	"close-failed",
	"number-parameters-failed",
	"begin-transaction-failed",
	"commit-failed",
	"rollback-failed",
	"next-failed",
	"end-of-rows",
	"not-enabled",
	"unknown",
}

// String implements [fmt.Stringer], returning the enum case name of e.
func (e ErrorCode) String() string {
	return _ErrorCodeStrings[e]
}

// MarshalText implements [encoding.TextMarshaler].
func (e ErrorCode) MarshalText() ([]byte, error) {
	return []byte(e.String()), nil
}

// UnmarshalText implements [encoding.TextUnmarshaler], unmarshaling into an enum
// case. Returns an error if the supplied text is not one of the enum cases.
func (e *ErrorCode) UnmarshalText(text []byte) error {
	return _ErrorCodeUnmarshalCase(e, text)
}

var _ErrorCodeUnmarshalCase = cm.CaseUnmarshaler[ErrorCode](_ErrorCodeStrings[:])

// Error represents the imported resource "hayride:db/db@0.0.65#error".
//
//	resource error
type Error cm.Resource

// ResourceDrop represents the imported resource-drop for resource "error".
//
// Drops a resource handle.
//
//go:nosplit
func (self Error) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_ErrorResourceDrop((uint32)(self0))
	return
}

// Code represents the imported method "code".
//
// return the error code.
//
//	code: func() -> error-code
//
//go:nosplit
func (self Error) Code() (result ErrorCode) {
	self0 := cm.Reinterpret[uint32](self)
	result0 := wasmimport_ErrorCode((uint32)(self0))
	result = (ErrorCode)((uint32)(result0))
	return
}

// Data represents the imported method "data".
//
// errors can be propagated with backend specific status through a string value.
//
//	data: func() -> string
//
//go:nosplit
func (self Error) Data() (result string) {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_ErrorData((uint32)(self0), &result)
	return
}

// Rows represents the imported resource "hayride:db/db@0.0.65#rows".
//
//	resource rows
type Rows cm.Resource

// ResourceDrop represents the imported resource-drop for resource "rows".
//
// Drops a resource handle.
//
//go:nosplit
func (self Rows) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_RowsResourceDrop((uint32)(self0))
	return
}

// Close represents the imported method "close".
//
//	close: func() -> result<_, error>
//
//go:nosplit
func (self Rows) Close() (result cm.Result[Error, struct{}, Error]) {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_RowsClose((uint32)(self0), &result)
	return
}

// Columns represents the imported method "columns".
//
// columns returns the names of the columns in the result set.
//
//	columns: func() -> list<string>
//
//go:nosplit
func (self Rows) Columns() (result cm.List[string]) {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_RowsColumns((uint32)(self0), &result)
	return
}

// Next represents the imported method "next".
//
// next returns the next row in the result set.
// returns an error with code end-of-rows when there are no more rows.
//
//	next: func() -> result<row, error>
//
//go:nosplit
func (self Rows) Next() (result cm.Result[Row, Row, Error]) {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_RowsNext((uint32)(self0), &result)
	return
}

// Statement represents the imported resource "hayride:db/db@0.0.65#statement".
//
//	resource statement
type Statement cm.Resource

// ResourceDrop represents the imported resource-drop for resource "statement".
//
// Drops a resource handle.
//
//go:nosplit
func (self Statement) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_StatementResourceDrop((uint32)(self0))
	return
}

// Close represents the imported method "close".
//
// Close the statement
//
//	close: func() -> result<_, error>
//
//go:nosplit
func (self Statement) Close() (result cm.Result[Error, struct{}, Error]) {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_StatementClose((uint32)(self0), &result)
	return
}

// Execute represents the imported method "execute".
//
// execute a statement returning the number of affected rows
//
//	execute: func(args: list<db-value>) -> result<u64, error>
//
//go:nosplit
func (self Statement) Execute(args cm.List[DbValue]) (result cm.Result[uint64, uint64, Error]) {
	self0 := cm.Reinterpret[uint32](self)
	args0, args1 := cm.LowerList(args)
	wasmimport_StatementExecute((uint32)(self0), (*DbValue)(args0), (uint32)(args1), &result)
	return
}

// NumberParameters represents the imported method "number-parameters".
//
// number-parameters returns the number of parameters expected by the statement
//
//	number-parameters: func() -> u32
//
//go:nosplit
func (self Statement) NumberParameters() (result uint32) {
	self0 := cm.Reinterpret[uint32](self)
	result0 := wasmimport_StatementNumberParameters((uint32)(self0))
	result = (uint32)((uint32)(result0))
	return
}

// Query represents the imported method "query".
//
// query executes a parameterized query returning rows
//
//	query: func(args: list<db-value>) -> result<rows, error>
//
//go:nosplit
func (self Statement) Query(args cm.List[DbValue]) (result cm.Result[Rows, Rows, Error]) {
	self0 := cm.Reinterpret[uint32](self)
	args0, args1 := cm.LowerList(args)
	wasmimport_StatementQuery((uint32)(self0), (*DbValue)(args0), (uint32)(args1), &result)
	return
}

// Transaction represents the imported resource "hayride:db/db@0.0.65#transaction".
//
//	resource transaction
type Transaction cm.Resource

// ResourceDrop represents the imported resource-drop for resource "transaction".
//
// Drops a resource handle.
//
//go:nosplit
func (self Transaction) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_TransactionResourceDrop((uint32)(self0))
	return
}

// Commit represents the imported method "commit".
//
// commit the transaction
//
//	commit: func() -> result<_, error>
//
//go:nosplit
func (self Transaction) Commit() (result cm.Result[Error, struct{}, Error]) {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_TransactionCommit((uint32)(self0), &result)
	return
}

// Execute represents the imported method "execute".
//
//	execute: func(query: string, args: list<db-value>) -> result<u64, error>
//
//go:nosplit
func (self Transaction) Execute(query string, args cm.List[DbValue]) (result cm.Result[uint64, uint64, Error]) {
	self0 := cm.Reinterpret[uint32](self)
	query0, query1 := cm.LowerString(query)
	args0, args1 := cm.LowerList(args)
	wasmimport_TransactionExecute((uint32)(self0), (*uint8)(query0), (uint32)(query1), (*DbValue)(args0), (uint32)(args1), &result)
	return
}

// Prepare represents the imported method "prepare".
//
//	prepare: func(query: string) -> result<statement, error>
//
//go:nosplit
func (self Transaction) Prepare(query string) (result cm.Result[Statement, Statement, Error]) {
	self0 := cm.Reinterpret[uint32](self)
	query0, query1 := cm.LowerString(query)
	wasmimport_TransactionPrepare((uint32)(self0), (*uint8)(query0), (uint32)(query1), &result)
	return
}

// Query represents the imported method "query".
//
//	query: func(query: string, args: list<db-value>) -> result<rows, error>
//
//go:nosplit
func (self Transaction) Query(query string, args cm.List[DbValue]) (result cm.Result[Rows, Rows, Error]) {
	self0 := cm.Reinterpret[uint32](self)
	query0, query1 := cm.LowerString(query)
	args0, args1 := cm.LowerList(args)
	wasmimport_TransactionQuery((uint32)(self0), (*uint8)(query0), (uint32)(query1), (*DbValue)(args0), (uint32)(args1), &result)
	return
}

// Rollback represents the imported method "rollback".
//
// rollback the transaction
//
//	rollback: func() -> result<_, error>
//
//go:nosplit
func (self Transaction) Rollback() (result cm.Result[Error, struct{}, Error]) {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_TransactionRollback((uint32)(self0), &result)
	return
}

// Connection represents the imported resource "hayride:db/db@0.0.65#connection".
//
//	resource connection
type Connection cm.Resource

// ResourceDrop represents the imported resource-drop for resource "connection".
//
// Drops a resource handle.
//
//go:nosplit
func (self Connection) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_ConnectionResourceDrop((uint32)(self0))
	return
}

// BeginTransaction represents the imported method "begin-transaction".
//
// begin-transaction starts a new transaction with the given isolation level and read-only
// flag.
//
//	begin-transaction: func(isolation-level: isolation-level, read-only: bool) -> result<transaction,
//	error>
//
//go:nosplit
func (self Connection) BeginTransaction(isolationLevel IsolationLevel, readOnly bool) (result cm.Result[Transaction, Transaction, Error]) {
	self0 := cm.Reinterpret[uint32](self)
	isolationLevel0 := (uint32)(isolationLevel)
	readOnly0 := (uint32)(cm.BoolToU32(readOnly))
	wasmimport_ConnectionBeginTransaction((uint32)(self0), (uint32)(isolationLevel0), (uint32)(readOnly0), &result)
	return
}

// Close represents the imported method "close".
//
// Close the connection
//
//	close: func() -> result<_, error>
//
//go:nosplit
func (self Connection) Close() (result cm.Result[Error, struct{}, Error]) {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_ConnectionClose((uint32)(self0), &result)
	return
}

// Prepare represents the imported method "prepare".
//
// Prepare returns a prepared statement for this connection.
// Allows parameterized queries.
//
//	prepare: func(query: string) -> result<statement, error>
//
//go:nosplit
func (self Connection) Prepare(query string) (result cm.Result[Statement, Statement, Error]) {
	self0 := cm.Reinterpret[uint32](self)
	query0, query1 := cm.LowerString(query)
	wasmimport_ConnectionPrepare((uint32)(self0), (*uint8)(query0), (uint32)(query1), &result)
	return
}

// Open represents the imported function "open".
//
// Open returns a new connection to the database
//
//	open: func(name: string) -> result<connection, error>
//
//go:nosplit
func Open(name string) (result cm.Result[Connection, Connection, Error]) {
	name0, name1 := cm.LowerString(name)
	wasmimport_Open((*uint8)(name0), (uint32)(name1), &result)
	return
}
