// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package types represents the imported interface "hayride:db/types@0.0.65".
package types

import (
	"go.bytecodealliance.org/cm"
)

// DbValue represents the variant "hayride:db/types@0.0.65#db-value".
//
// Database value types
//
//	variant db-value {
//		int32(s32),
//		int64(s64),
//		uint32(u32),
//		uint64(u64),
//		float(f64),
//		double(f64),
//		str(string),
//		boolean(bool),
//		date(string),
//		time(string),
//		timestamp(string),
//		binary(list<u8>),
//		null,
//	}
type DbValue cm.Variant[uint8, string, int64]

// DbValueInt32 returns a [DbValue] of case "int32".
func DbValueInt32(data int32) DbValue {
	return cm.New[DbValue](0, data)
}

// Int32 returns a non-nil *[int32] if [DbValue] represents the variant case "int32".
func (self *DbValue) Int32() *int32 {
	return cm.Case[int32](self, 0)
}

// DbValueInt64 returns a [DbValue] of case "int64".
func DbValueInt64(data int64) DbValue {
	return cm.New[DbValue](1, data)
}

// Int64 returns a non-nil *[int64] if [DbValue] represents the variant case "int64".
func (self *DbValue) Int64() *int64 {
	return cm.Case[int64](self, 1)
}

// DbValueUint32 returns a [DbValue] of case "uint32".
func DbValueUint32(data uint32) DbValue {
	return cm.New[DbValue](2, data)
}

// Uint32 returns a non-nil *[uint32] if [DbValue] represents the variant case "uint32".
func (self *DbValue) Uint32() *uint32 {
	return cm.Case[uint32](self, 2)
}

// DbValueUint64 returns a [DbValue] of case "uint64".
func DbValueUint64(data uint64) DbValue {
	return cm.New[DbValue](3, data)
}

// Uint64 returns a non-nil *[uint64] if [DbValue] represents the variant case "uint64".
func (self *DbValue) Uint64() *uint64 {
	return cm.Case[uint64](self, 3)
}

// DbValueFloat returns a [DbValue] of case "float".
func DbValueFloat(data float64) DbValue {
	return cm.New[DbValue](4, data)
}

// Float returns a non-nil *[float64] if [DbValue] represents the variant case "float".
func (self *DbValue) Float() *float64 {
	return cm.Case[float64](self, 4)
}

// DbValueDouble returns a [DbValue] of case "double".
func DbValueDouble(data float64) DbValue {
	return cm.New[DbValue](5, data)
}

// Double returns a non-nil *[float64] if [DbValue] represents the variant case "double".
func (self *DbValue) Double() *float64 {
	return cm.Case[float64](self, 5)
}

// DbValueStr returns a [DbValue] of case "str".
func DbValueStr(data string) DbValue {
	return cm.New[DbValue](6, data)
}

// Str returns a non-nil *[string] if [DbValue] represents the variant case "str".
func (self *DbValue) Str() *string {
	return cm.Case[string](self, 6)
}

// DbValueBoolean returns a [DbValue] of case "boolean".
func DbValueBoolean(data bool) DbValue {
	return cm.New[DbValue](7, data)
}

// Boolean returns a non-nil *[bool] if [DbValue] represents the variant case "boolean".
func (self *DbValue) Boolean() *bool {
	return cm.Case[bool](self, 7)
}

// DbValueDate returns a [DbValue] of case "date".
func DbValueDate(data string) DbValue {
	return cm.New[DbValue](8, data)
}

// Date returns a non-nil *[string] if [DbValue] represents the variant case "date".
func (self *DbValue) Date() *string {
	return cm.Case[string](self, 8)
}

// DbValueTime returns a [DbValue] of case "time".
func DbValueTime(data string) DbValue {
	return cm.New[DbValue](9, data)
}

// Time returns a non-nil *[string] if [DbValue] represents the variant case "time".
func (self *DbValue) Time() *string {
	return cm.Case[string](self, 9)
}

// DbValueTimestamp returns a [DbValue] of case "timestamp".
func DbValueTimestamp(data string) DbValue {
	return cm.New[DbValue](10, data)
}

// Timestamp returns a non-nil *[string] if [DbValue] represents the variant case "timestamp".
func (self *DbValue) Timestamp() *string {
	return cm.Case[string](self, 10)
}

// DbValueBinary returns a [DbValue] of case "binary".
func DbValueBinary(data cm.List[uint8]) DbValue {
	return cm.New[DbValue](11, data)
}

// Binary returns a non-nil *[cm.List[uint8]] if [DbValue] represents the variant case "binary".
func (self *DbValue) Binary() *cm.List[uint8] {
	return cm.Case[cm.List[uint8]](self, 11)
}

// DbValueNull returns a [DbValue] of case "null".
func DbValueNull() DbValue {
	var data struct{}
	return cm.New[DbValue](12, data)
}

// Null returns true if [DbValue] represents the variant case "null".
func (self *DbValue) Null() bool {
	return self.Tag() == 12
}

var _DbValueStrings = [13]string{
	"int32",
	"int64",
	"uint32",
	"uint64",
	"float",
	"double",
	"str",
	"boolean",
	"date",
	"time",
	"timestamp",
	"binary",
	"null",
}

// String implements [fmt.Stringer], returning the variant case name of v.
func (v DbValue) String() string {
	return _DbValueStrings[v.Tag()]
}

// IsolationLevel represents the enum "hayride:db/types@0.0.65#isolation-level".
//
//	enum isolation-level {
//		read-uncommitted,
//		read-committed,
//		write-committed,
//		repeatable-read,
//		snapshot,
//		serializable,
//		linearizable
//	}
type IsolationLevel uint8

const (
	IsolationLevelReadUncommitted IsolationLevel = iota
	IsolationLevelReadCommitted
	IsolationLevelWriteCommitted
	IsolationLevelRepeatableRead
	IsolationLevelSnapshot
	IsolationLevelSerializable
	IsolationLevelLinearizable
)

var _IsolationLevelStrings = [7]string{
	"read-uncommitted",
	"read-committed",
	"write-committed",
	"repeatable-read",
	"snapshot",
	"serializable",
	"linearizable",
}

// String implements [fmt.Stringer], returning the enum case name of e.
func (e IsolationLevel) String() string {
	return _IsolationLevelStrings[e]
}

// MarshalText implements [encoding.TextMarshaler].
func (e IsolationLevel) MarshalText() ([]byte, error) {
	return []byte(e.String()), nil
}

// UnmarshalText implements [encoding.TextUnmarshaler], unmarshaling into an enum
// case. Returns an error if the supplied text is not one of the enum cases.
func (e *IsolationLevel) UnmarshalText(text []byte) error {
	return _IsolationLevelUnmarshalCase(e, text)
}

var _IsolationLevelUnmarshalCase = cm.CaseUnmarshaler[IsolationLevel](_IsolationLevelStrings[:])

// Row represents the list "hayride:db/types@0.0.65#row".
//
//	type row = list<db-value>
type Row cm.List[DbValue]
