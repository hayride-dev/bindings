// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package threads represents the imported interface "hayride:silo/threads@0.0.29".
package threads

import (
	"go.bytecodealliance.org/cm"
)

// ErrNo represents the u32 "hayride:silo/threads@0.0.29#err-no".
//
// system error numbers
//
//	type err-no = u32
type ErrNo uint32

// Spawn represents the imported function "spawn".
//
//	spawn: func(path: string, function: string, args: list<string>) -> result<s32,
//	err-no>
//
//go:nosplit
func Spawn(path string, function string, args cm.List[string]) (result cm.Result[int32, int32, ErrNo]) {
	path0, path1 := cm.LowerString(path)
	function0, function1 := cm.LowerString(function)
	args0, args1 := cm.LowerList(args)
	wasmimport_Spawn((*uint8)(path0), (uint32)(path1), (*uint8)(function0), (uint32)(function1), (*string)(args0), (uint32)(args1), &result)
	return
}

// Wait represents the imported function "wait".
//
//	wait: func(thread-id: u32) -> result<list<u8>, err-no>
//
//go:nosplit
func Wait(threadID uint32) (result cm.Result[cm.List[uint8], cm.List[uint8], ErrNo]) {
	threadId0 := (uint32)(threadID)
	wasmimport_Wait((uint32)(threadId0), &result)
	return
}
